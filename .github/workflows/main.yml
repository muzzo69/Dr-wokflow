name: AWS Disaster Recovery

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read

on:
  push:
    branches:
      - feature/prod-dr
  workflow_dispatch:

jobs:
  check-primary-region:
    name: Check Primary Region
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1  # Primary region
      HEALTH_CHECK_ID: 6fbd908a-e25a-401a-ae1a-b21cb509290c  # Added Health Check ID

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials for Primary Region
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::576430970391:role/terraform-github-oidc-role
          aws-region: us-east-1

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Check Primary Region Status
        id: check-status
        run: |
          primary_status=$(aws route53 get-health-check-status \
            --health-check-id $HEALTH_CHECK_ID \
            --region us-east-1 | jq -r '.HealthCheckObservations[0].StatusReport.Status')
          echo "Primary Region Status: $primary_status"
          if [[ "$primary_status" == "UNHEALTHY" ]]; then
            echo "status=DOWN" >> $GITHUB_ENV
            echo "status=DOWN" >> $GITHUB_OUTPUT
          else
            echo "status=UP" >> $GITHUB_ENV
            echo "status=UP" >> $GITHUB_OUTPUT
          fi

    outputs:
      status: ${{ steps.check-status.outputs.status }}

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: check-primary-region
    env:
      AWS_REGION: us-east-1  # Primary region

    steps:
      - name: Configure AWS credentials for Notification
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::576430970391:role/terraform-github-oidc-role
          aws-region: us-east-1

      - name: Send AWS SNS Notification
        run: |
          if [[ "${{ needs.check-primary-region.outputs.status }}" == "DOWN" ]]; then
            message="ðŸš¨ ALERT: Primary AWS region (us-east-1) is DOWN. Deploying to Secondary Region (us-west-2)."
          else
            message="âœ… INFO: Primary AWS region (us-east-1) is HEALTHY. No failover required."
          fi

          aws sns publish \
            --topic-arn arn:aws:sns:us-east-1:576430970391:7c-Dr-topic \
            --message "ðŸš¨ ALERT: Primary AWS region ($AWS_REGION) is DOWN. Deploying to Secondary Region (us-west-2)." \
            --region $AWS_REGION

  deploy-secondary:
    name: Deploy to Secondary Region
    runs-on: ubuntu-latest
    needs: [check-primary-region, notify]
    env:
      AWS_REGION: us-west-2  # Secondary region
    if: ${{ needs.check-primary-region.outputs.status == 'DOWN' }}

    steps:
      - name: Call Terraform Apply Workflow
        uses: ./.github/workflows/terraform-apply.yaml
        with:
          working-dir: servers
          apply: true
