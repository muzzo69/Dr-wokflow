name: Disaster Recovery Route 53 Failover

on:
  workflow_dispatch:  # Allows manual execution

jobs:
  dr_failover:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          if command -v aws &> /dev/null; then
            echo "AWS CLI already installed, updating..."
            sudo ./aws/install --update
          else
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Change to your primary AWS region

      - name: Check Primary Region Health via AWS CloudWatch
        run: |
          HEALTH_STATUS=$(aws cloudwatch get-metric-data \
            --metric-data-queries '[{"Id":"m1","MetricStat":{"Metric":{"Namespace":"AWS/ApplicationELB","MetricName":"HTTPCode_Target_5XX_Count","Dimensions":[{"Name":"LoadBalancer","Value":"PRIMARY_LB_ARN"}]}},"Period":60,"Stat":"Sum"}}]' \
            --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%SZ) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%SZ) \
            --query 'MetricDataResults[0].Values[0]' --output text)
          
          if [ "$HEALTH_STATUS" != "None" ] && [ "$HEALTH_STATUS" -gt 0 ]; then
            echo "Primary region is down. Triggering DR failover..."
            echo "FAILOVER=true" >> $GITHUB_ENV
          else
            echo "Primary region is healthy."
            echo "FAILOVER=false" >> $GITHUB_ENV
          fi

      - name: Verify Secondary Region Health
        if: env.FAILOVER == 'true'
        run: |
          SECONDARY_HEALTH=$(aws cloudwatch get-metric-data \
            --metric-data-queries '[{"Id":"m1","MetricStat":{"Metric":{"Namespace":"AWS/ApplicationELB","MetricName":"HTTPCode_Target_5XX_Count","Dimensions":[{"Name":"LoadBalancer","Value":"SECONDARY_LB_ARN"}]}},"Period":60,"Stat":"Sum"}}]' \
            --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%SZ) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%SZ) \
            --query 'MetricDataResults[0].Values[0]' --output text)
          
          if [ "$SECONDARY_HEALTH" != "None" ] && [ "$SECONDARY_HEALTH" -gt 0 ]; then
            echo "Secondary region is also down. No failover will be performed."
            exit 1
          fi

      - name: Update Route 53 Record if Needed
        if: env.FAILOVER == 'true'
        run: |
          cat <<EOF > route53-change.json
          {
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "your-app.com",
                  "Type": "A",
                  "TTL": 60,
                  "ResourceRecords": [
                    { "Value": "SECONDARY_REGION_IP" }
                  ]
                }
              }
            ]
          }
          EOF

          aws route53 change-resource-record-sets --hosted-zone-id YOUR_HOSTED_ZONE_ID --change-batch file://route53-change.json

      - name: Notify on Failover
        if: env.FAILOVER == 'true'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Disaster Recovery: Traffic switched to secondary region!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback to Primary When Available
        run: |
          HEALTH_STATUS=$(aws cloudwatch get-metric-data \
            --metric-data-queries '[{"Id":"m1","MetricStat":{"Metric":{"Namespace":"AWS/ApplicationELB","MetricName":"HTTPCode_Target_5XX_Count","Dimensions":[{"Name":"LoadBalancer","Value":"PRIMARY_LB_ARN"}]}},"Period":60,"Stat":"Sum"}}]' \
            --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%SZ) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%SZ) \
            --query 'MetricDataResults[0].Values[0]' --output text)
          
          if [ "$HEALTH_STATUS" == "None" ] || [ "$HEALTH_STATUS" -eq 0 ]; then
            echo "Primary region has recovered. Restoring traffic."
            cat <<EOF > route53-change.json
            {
              "Changes": [
                {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "your-app.com",
                    "Type": "A",
                    "TTL": 60,
                    "ResourceRecords": [
                      { "Value": "PRIMARY_REGION_IP" }
                    ]
                  }
                }
              ]
            }
            EOF

            aws route53 change-resource-record-sets --hosted-zone-id YOUR_HOSTED_ZONE_ID --change-batch file://route53-change.json
          fi
